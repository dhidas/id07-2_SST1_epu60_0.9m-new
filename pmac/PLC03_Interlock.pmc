#ifndef PLC03_Interlock_pmc
#define PLC03_Interlock_pmc
// ******************************************************************************
// PLC 3 - PLC_Interlock
//
// Handles:
//    - Interlock signal
//    - StopAll request from software
//    - Individual motor stop requests (StopMotorX)
// ******************************************************************************

#include "Constants.pmc"
#include "PVariables.pmc"
#include "MVariables.pmc"
#include "Timers.pmc"

// Local only substitutions
#define localMotorStopCommand P(1060 + P_MotorNumber)
#define localMotorAmpEnabled M(P_MotorNumber*100 + 39)

Open PLC kPLC_Interlock Clear

// **************************
// Handle interlock request
// **************************
if (P_InterlockState = kFALSE)
  // Check for transitioning into interlock mode
  // Interlock is not inverted signal - SafetyPLC output = 1 - sys okay
  if (M_SafetyPLCIn = kLOW)
    // ******************
    // Transitioning into interlock state
    // ******************
    P_InterlockState = kTRUE
    M_MachineErrorLight = kON

    //********************
    // Disable all PLCs that could cause movement
    // Clear movement requests
    //*******************
    Disable PLC kPLC_MoveRequest
    Disable PLC kPLC_OpenGap
    Disable PLC kPLC_Homing

    // Disable request if any
    P_MotorHomeRequest = kFALSE
    
    // Kill Motors and disable motion programs
    CMD"^K"
    
    // Wait for them to stop
    I_CS2_Timer2 = kTIMEOUT_KILL * kMilliSecond
    while (I_CS2_Timer2 > 0)
    endwhile      
  endif
else
  // Interlock was active, but we need to transition out of it
  if (M_SafetyPLCIn = kHIGH)
    // Exit out of interlock
    if (P_StopAllStat = kFALSE AND P_StopAllReq = kFALSE)
              
      M_MotorDriveReset = kHIGH    // M44
      
      I_CS2_Timer2 = kTIMEOUT_FAULTRESET * kMilliSecond
      while (I_CS2_Timer2 > 0) 
      endwhile
      
      M_MotorDriveReset = kLOW    // M44

      //********************
      // Enable all PLCs that could cause movement
      //*******************
      // Disable request if any
      P_MotorHomeRequest = kFALSE

      Enable PLC kPLC_MoveRequest
      Enable PLC kPLC_OpenGap
      Enable PLC kPLC_Homing
      
      // If OpenGap was active at this time this will cause it to start executing again
      P_OpenGapExecuting = kFALSE
    endif
  
    P_InterlockState = kFALSE
    M_MachineErrorLight = kOFF
  else
    // We are in interlock state. Make sure amps are killed and remain so
    if (M_Amp1Enabled = kTRUE)
    OR (M_Amp3Enabled = kTRUE)
    OR (M_Amp5Enabled = kTRUE)
    OR (M_Amp6Enabled = kTRUE)
    OR (M_Amp7Enabled = kTRUE)
    OR (M_Amp8Enabled = kTRUE)

      M_Mtr1_Amp_Enable = kFALSE
      M_Mtr3_Amp_Enable = kFALSE
      M_Mtr5_Amp_Enable = kFALSE
      M_Mtr6_Amp_Enable = kFALSE
      M_Mtr7_Amp_Enable = kFALSE
      M_Mtr8_Amp_Enable = kFALSE
      CMD"^K"

    endif    
  endif
endif

// **************************
// Handle StopAll request
// **************************
// Ignore if we are in interlock
if (P_InterlockState = kFALSE)
  // Handle stopall request
  if (P_StopAllStat != P_StopAllReq)
    // Handle request to stop, if we are not yet stopped
    if (P_StopAllReq != kFALSE)
      //********************
      // Disable all PLCs that could cause movement
      // Clear movement requests
      //*******************
      DISABLE PLC PLC_MoveRequest
      DISABLE PLC PLC_OpenGap
      DISABLE PLC PLC_Homing

      // Disable request if any
      P_MotorHomeRequest = kFALSE
      
      // Abort all moves and stop all motors
      CMD"&1A"
      CMD"&2A"
      CMD"&6A"
      I_CS2_Timer2 = kTIMEOUT_ABORT * kMilliSecond
      while (I_CS2_Timer2 > 0) 
      endwhile
      
      // Kill Motors (will disable amplifiers)
      CMD"^K"
      // Wait for the command to be processed (600)
      I_CS2_Timer2 = kTIMEOUT_KILL * kMilliSecond
      while (I_CS2_Timer2 > 0) 
      endwhile        
    endif
    
    if (P_StopAllReq = kFALSE)
      M_MotorDriveReset = kHIGH

      // Wait for drive to reset
      I_CS2_Timer2 = kTIMEOUT_FAULTRESET * kMilliSecond
      while (I_CS2_Timer2 > 0) 
      endwhile
      
      M_MotorDriveReset = kLOW
    
      //********************
      // Enable all PLCs that could cause movement
      // Clear movement conditions
      //*******************

      // Disable request if any
      P_MotorHomeRequest = kFALSE
      ENABLE PLC PLC_Homing
      ENABLE PLC PLC_OpenGap
      ENABLE PLC PLC_MoveRequest
      
      // If OpenGap was active at this time this will cause it to start executing again
      P_OpenGapExecuting = kFALSE
    endif
    
    P_StopAllStat = P_StopAllReq
  endif
endif




// **********************************************
// Handle Stop commands for individual gap motors
// **********************************************
if (M_CS1Running = kFALSE AND P_StopAllStat = kFALSE AND P_InterlockState = kFALSE)

  P_MotorNumber = 1
  P_HomingPLCStopped = kFALSE // Flag indicating whether the plc has been stopped

  ; XXX Check.  This makes no sense to me.  I think it only does gap motors
  ; but why not phase motors???
  while (P_MotorNumber < 5) // For each motor
    // *** Check for stop request & if the motor has been enabled ***
    if ( localMotorStopCommand != kFALSE AND localMotorAmpEnabled = kTRUE )
        // Special processing for Gap motors
        if (P_MotorNumber < 5)
          // Disable homing PLC and clear the homing request
          Disable PLC kPLC_Homing
          P_MotorHomeRequest = kFALSE
          P_HomingPLCStopped = kTRUE
          
          // Address the motor and issue stop
          ADDRESS#P_MotorNumber
          CMD"K"
        else
          // Address the motor and issue stop
          ADDRESS#P_MotorNumber
          CMD"K"
        endif
        
        // Clear the stop 
        localMotorStopCommand = kFALSE
    endif
    
    // Increment for next motor
    P_MotorNumber = P_MotorNumber + 1
  endwhile
  
  // If the Homing PLC has been disabled make sure to enable it.
  if (P_HomingPLCStopped = kTRUE) 
    // Disable any homing request issued in meantime and enable homing PLC
    P_MotorHomeRequest = kFALSE 
    Enable PLC kPLC_Homing
  endif    
endif

Close

#endif
