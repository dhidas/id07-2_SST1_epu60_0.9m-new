#include "Timers.pmc"
#include "Constants.pmc"

// Homing PLC for Axis 6 on EPU (Phase Top Inner)


// This homing routine will search for the home switch immediately, without first
// doing a search for a limit switch.
// Heidenhain encoder has a home switch that is high for half the length of the encoder.
// It also has a home index that is a little over 1 mm from the point that the home switch
// changes from high to low.
// The home switch reading determines the direction of search for the home index signal.
// For this particular equipment the home switch can be high on either the positive or negative 
// side of the home index, depending on how the encoder was mounted. It has to be determined prior
// to setting up the PLC for that particular axis.
// 
// Johnny Kirkland 2016-02-11
// 	using template from Wayne Lewis 
//
// Macros:
// - PLC: PLC number
// - AXIS: motion axis
// - TIMER: PMAC timer to use
// - SERVO: first three digits of axis gate array (I7mn)
// - HOME_POL: polarity of home switch signal
//
// P variables
// P2500 - homing state (homing, not homing)
// P2501 - homing status (limit search, home search, post-home move)
// P2502 - post-home move (0 = return to previous, 1 = stay at zero)
// P2505 - sucessfully finished homing

// Homing State P Variable
P2500 = 0

// Homing Status P Variable
P2501 = 0

// Homing successful
P2505 = 0

OPEN PLC25 CLEAR

//---- Configuring State ----
P2500 = 1
P2501 = 1
P2502 = 1
//Save high soft limits to P variable Pxx04
P2504 = I613
//Save the low soft limits to P variable Pxx20
P2520 = I614
//Save the home capture flags to P variable Pxx36
P2536 = I7122
//Save the homing speed/direction to P variable Pxx66
P2566 = I623
//Save the limit flags to P variable Pxx68
P2568 = I624
//Save the current home offset
P2570 = I626
//Save the current position to P variable Pxx84
P2584 = M662
//Clear the soft limits
I613 = 0
I614 = 0

// Ensure that brake is released
// if(M_Mtr6_Brake_Out = ENGAGED)
//	M_Mtr6_Brake_Out = RELEASED
//	I_CS13_Timer2 = 20 MilliSeconds	// Small delay to release brake
//	WHILE(I_CS13_Timer2>0)
//	END WHILE
// endif

IF(P2501 = 1)
	IF(M620 = 0)			// Home flag now LO, -> on negative side of home flag edge.
		IF(P2501 = 1)
			P2500 = 8
			I623 = kGapMtrHomeSpeed
			I626 = 0
			// Set the home offset to 0.
			I7123 = 0
			// Capture on flag high =2. Capture on flag low =10.
			I7122 = 2
			// first searches for home flag which is below home index
			CMD "#6HM"
			I_CS13_Timer2 = 20 * kMilliSecond	// Small delay to start moving, 100 servo cycles = 20 msec
			WHILE(I_CS13_Timer2>0)
			END WHILE

			I_CS13_Timer2 = 600000 * kMilliSecond	// Now start checking the conditions, = 600 sec
			WHILE(M640 = 0)	// At least one motor should not be In Position
			AND(M642 = 0) 	// No following errors should be set for any motor
			AND(M630 = 0)	// Should not stop on position limit for selected motors
			AND(I_CS13_Timer2>0)	// Check for timeout
			AND(P2501 = 1)	// Check that we did not abort
			END WHILE

			IF(M642 = 1)	// If fatal following error
				P2501 = 4
			END IF
			IF(M630 = 1)	// If a motor hit a limit
				P2501 = 5
			END IF
			IF(I_CS13_Timer2<0 OR I_CS13_Timer2 = 0)	// If timed out
				P2501 = 3
			END IF
		END IF
	ELSE			// Home flag now HI, -> on positive side of home flag edge.
		IF(P2501 = 1)
			P2500 = 8
			I623 = -kGapMtrHomeSpeed
			I626 = 0
			// Set the home offset to 0.
			I7123 = 0
			// Capture on flag high =2. Capture on flag low =10.
			I7122 = 10
			// first searches for home flag which is below home index
			CMD "#6HM"
			I_CS13_Timer2 = 20 * kMilliSecond	// Small delay to start moving, 100 servo cycles = 20 msec
			WHILE(I_CS13_Timer2>0)
			END WHILE

			I_CS13_Timer2 = 600000 * kMilliSecond	// Now start checking the conditions, = 600 sec
			WHILE(M640 = 0)	// At least one motor should not be In Position
			AND(M642 = 0) 	// No following errors should be set for any motor
			AND(M630 = 0)	// Should not stop on position limit for selected motors
			AND(I_CS13_Timer2>0)	// Check for timeout
			AND(P2501 = 1)	// Check that we did not abort
			END WHILE

			IF(M642 = 1)	// If fatal following error
				P2501 = 4
			END IF
			IF(M630 = 1)	// If a motor hit a limit
				P2501 = 5
			END IF
			IF(I_CS13_Timer2<0 OR I_CS13_Timer2 = 0)	// If timed out
				P2501 = 3
			END IF
		END IF
	END IF

	IF(P2501 = 1)
		M672 = -15000		// This number dependent on distance between home flag and home index.
		COMMAND "#6J^*"		// Insures move to home index will be positive.
							// Backing off just to be sure.
		I_CS13_Timer2 = 20 * kMilliSecond	// Small delay to start moving, 100 servo cycles = 20 msec
		WHILE(I_CS13_Timer2>0)
		END WHILE

		I_CS13_Timer2 = 600000 * kMilliSecond	// Now start checking the conditions, = 600 sec
		WHILE(M640 = 0)	// At least one motor should not be In Position
		AND(M642 = 0) 	// No following errors should be set for any motor
		AND(M630 = 0)	// Should not stop on position limit for selected motors
		AND(I_CS13_Timer2>0)	// Check for timeout
		AND(P2501 = 1)	// Check that we did not abort
		END WHILE

		IF(M642 = 1)	// If fatal following error
			P2501 = 4
		END IF
		IF(M630 = 1)	// If a motor hit a limit
			P2501 = 5
		END IF
		IF(I_CS13_Timer2<0 OR I_CS13_Timer2 = 0)	// If timed out
			P2501 = 3
		END IF
	END IF

	IF(P2501 = 1)
		P2586 = (P2586 - M662) / (I608 * 32) - (I626 / 16)	// ??? operating on a previously undefined variable???
	END IF							// - (actual position) - (home offset)

	IF(P2501 = 1)
		P2500 = 4
		I7122 = 1			// capture control back to home index
		I626 = P2570		// home offset restored
		I623 = kGapMtrHomeSpeed			// home direction and speed set
		COMMAND"#6HM"		// home motor
		I_CS13_Timer2 = 20 * kMilliSecond	// Small delay to start moving, 100 servo cycles = 20 msec
		WHILE(I_CS13_Timer2>0)
		END WHILE

		I_CS13_Timer2 = 600000 * kMilliSecond	// Now start checking the conditions, = 600 sec
		WHILE(M640 = 0)	// At least one motor should not be In Position
		AND(M642 = 0) 	// No following errors should be set for any motor
		AND(M630 = 0)	// Should not stop on position limit for selected motors
		AND(I_CS13_Timer2>0)	// Check for timeout
		AND(P2501 = 1)	// Check that we did not abort
		END WHILE

		IF(M642 = 1)	// If fatal following error
			P2501 = 4
		END IF
		IF(M630 = 1)	// If a motor hit a limit
			P2501 = 5
		END IF
		IF(I_CS13_Timer2<0 OR I_CS13_Timer2 = 0)	// If timed out
			P2501 = 3
		END IF
	END IF

	//---- Check if all motors have homed ----
	IF(P2501 = 1) AND (M645 = 0)
		P2501 = 6			// if home not complete
	END IF
			
	//---- Set motor position ----for gap motors only
	//IF(P2501=1) AND (M645=1)	// if home complete
	//	M662=35.5*5000*I608*32	// X(mm)*5000*I608*32 (encoder is 5000 cts/mm), X is mid-point position
	//END IF
				
	//---- PostHomeMove State ----
	IF(P2501 = 1)
		IF(P2502 = 0)	// set P2502 to 0 in initialization if you want to go back to original position
			P2500 = 5
			M672 = P2584 / (I608 * 32)	// jog to initial position/(pos. scale factor*32)
			COMMAND "#6J=*"
			I_CS13_Timer2 = 20 * kMilliSecond	// Small delay to start moving, 100 servo cycles = 20 msec
			WHILE(I_CS13_Timer2>0)
			END WHILE

			I_CS13_Timer2 = 600000 * kMilliSecond	// Now start checking the conditions, = 600 sec
			WHILE(M640 = 0)	// At least one motor should not be In Position
			AND(M642 = 0) 	// No following errors should be set for any moto
			AND(M630 = 0)	// Should not stop on position limit for selected motors
			AND(I_CS13_Timer2>0)	// Check for timeout
			AND(P2501 = 1)	// Check that we did not abort
			END WHILE

			IF(M642 = 1)	// If fatal following error
				P2501 = 4
			END IF
			IF(M630 = 1)	// If a motor hit a limit
				P2501 = 5
			END IF
			IF(I_CS13_Timer2<0 OR I_CS13_Timer2 = 0)	// If timed out
				P2501 = 3
			END IF
		END IF
	END IF
END IF

//---- Done ----
//If we have got this far without failing, set status and state done
IF(P2501 = 1)
	P2501 = 0
	P2500 = 7
	P2505 = 1
END IF

//---- Tidy Up ----
//Stop all motors if they do not have a following error
IF(M642 = 0)
	COMMAND "#6J/"
END IF

//Restore the high soft limits from P variables Pxx04..x19
I613 = P2504
//Restore the low soft limits from P variables Pxx20..x35
I614 = P2520
//Restore the home capture flags from P variables Pxx36..x51
I7122 = P2536
//Restore the homing speed/direction from P variables Pxx66
I623 = P2566
//Restore the limit flags to P variables Pxx68..x83
I624 = P2568
//Restore the home offset from P variables Pxx70
I626 = P2570

DISABLE PLC25

CLOSE
