#include "Constants.pmc"
#include "PVariables.pmc"
#include "MVariables.pmc"
#include "Timers.pmc"

// ******************************************************************************
// Applies new offsets for Gap movement
// given a request
// ******************************************************************************      
Open PLC kPLC_Homing Clear
  // Motor homing requested
  if (P_MovementInProgress = kFALSE AND P_MotorHomeRequest > 0 AND P_MotorHomeRequest < 5)
    
    // Check if homing is allowed
    if (P_MotorHomeRequest = 1 OR P_MotorHomeRequest = 3)
      P_MotorHomeStatus = P_MotorHomeRequest
      P_MotorHomeRequest = 0

      P_UpperHmStatus = 0  // clear status flag

      // Set home status to not homed for mtr 1 & 3
      M_Mtr1HomeComplete = kFALSE
      M_Mtr3HomeComplete = kFALSE

      // Disable PLC that resets limits
      Disable PLC kPLC_Limits
  
      // Save soft limits to P temp variables
      P_TmpMtr1HiLim = I113
      P_TmpMtr1LoLim = I114
      P_TmpMtr3HiLim = I313
      P_TmpMtr3LoLim = I314

      // Set no soft limits
      I113 = 0
      I114 = 0
      I313 = 0
      I314 = 0

      // Command to go to positive limit switch
      CMD"#1j+ #3j+"
      I_CS3_Timer2 = kENABLE_DELAY * kMilliSecond
      while (I_CS3_Timer2 > 0)
      endwhile

      I_CS3_Timer2 = 600000 * kMilliSecond
      while(I_CS3_Timer2 > 0)
        if(M_Mtr1InPos=kTRUE AND M_Mtr3InPos=kTRUE AND M_Mtr1StoppedOnLim=kTRUE AND M_Mtr3StoppedOnLim=kTRUE)  // In-position and on limit true
          P_UpperHmStatus = kPOS_JOG_SUCCESS
          I_CS3_Timer2 = -1
        endif
        // Following error
        if(M_Mtr1FFE = kTRUE)
          P_UpperHmStatus = kMTR1_FFE
          I_CS3_Timer2 = -1
        endif
        if(M_Mtr3FFE = kTRUE)
          P_UpperHmStatus = kMTR3_FFE
          I_CS3_Timer2 = -1
        endif
        if(M_Mtr1OpenLoop = kTRUE OR M_Mtr3OpenLoop = kTRUE)        // Motor open loop
          cmd"#1K #3K"
          P_UpperHmStatus = kPOS_JOG_FAILURE
          I_CS3_Timer2 = -1
        endif
      endwhile

      I_CS3_Timer2 = 200 * kMilliSecond
      while (I_CS3_Timer2 > 0)
      endwhile

      // Back up from positive limit 
      if (P_UpperHmStatus = kPOS_JOG_SUCCESS)

        P_UpperHmStatus = 0          // clear status flag
                         
        CMD"#1J^-15000"
        CMD"#3J^-15000"
        I_CS3_Timer2 = kENABLE_DELAY * kMilliSecond
        while (I_CS3_Timer2 > 0)
        endwhile

        I_CS3_Timer2 = 20000 * kMilliSecond
        while(I_CS3_Timer2 > 0)
          if(M_Mtr1InPos = kTRUE AND M_Mtr3InPos = kTRUE)      // In-position true
            P_UpperHmStatus = kNEG_JOG_SUCCESS
            I_CS3_Timer2 = -1
          endif
          // Following error
          if(M_Mtr1FFE = kTRUE)
            P_UpperHmStatus = kMTR1_FFE
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr3FFE = kTRUE)
            P_UpperHmStatus = kMTR3_FFE
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr1OpenLoop = kTRUE OR M_Mtr3OpenLoop = kTRUE)      // Either set to open loop
            CMD"#1k #3k"
            P_UpperHmStatus = kPOS_JOG_FAILURE
            I_CS3_Timer2 = -1
          endif
        endwhile
      endif

      I_CS3_Timer2 = 200 * kMilliSecond
      while (I_CS3_Timer2 > 0)
      endwhile

      // Jog to limits at home speed 
      if (P_UpperHmStatus = kNEG_JOG_SUCCESS)

        I122 = kGapMtrHomeSpeed
        I322 = kGapMtrHomeSpeed
        P_UpperHmStatus = 0  // clear status flag

        CMD"#1j+ #3j+"
        I_CS3_Timer2 = kENABLE_DELAY * kMilliSecond
        while (I_CS3_Timer2 > 0)
        endwhile

        I_CS3_Timer2 =80000 * kMilliSecond
        while(I_CS3_Timer2 > 0)
          if(M_Mtr1InPos = kTRUE AND M_Mtr3InPos = kTRUE AND M_Mtr1StoppedOnLim = kTRUE AND M_Mtr3StoppedOnLim = kTRUE)
            P_UpperHmStatus = kPOS_JOG_SUCCESS
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr1FFE = kTRUE)
            P_UpperHmStatus = kMTR1_FFE
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr3FFE=1)
            P_UpperHmStatus = kMTR3_FFE
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr1OpenLoop = kTRUE OR M_Mtr3OpenLoop = kTRUE)
            CMD"#1k #3k"
            P_UpperHmStatus = kPOS_JOG_FAILURE
            I_CS3_Timer2 = -1
          endif
        endwhile
      endif


      if(P_UpperHmStatus = kPOS_JOG_SUCCESS)

        P_UpperHmStatus = 0  // clear status flag

        // Set position of mtrs 1 & 3
        CMD"#1K #3K"
        I_CS3_Timer2 = 200 * kMilliSecond    // Small delay to stop moving, 100 servo cycles = 20 msec
        while(I_CS3_Timer2>0)
        endwhile
  
        M_Mtr1ActPos = kM1_POS_LIMIT * I108 * 32    // Counts at limit*I108*32
        M_Mtr3ActPos = kM3_POS_LIMIT * I108 * 32    // Counts at limit*I108*32
        I_CS3_Timer2 = 100 * kMilliSecond
        while(I_CS3_Timer2 > 0)
        endwhile

        // Reset jog speeds
        I122 = kGapMtrSpeed
        I322 = kGapMtrSpeed

        // move off limit switches
        cmd "#1J^-15000 #3J^-15000"
        I_CS3_Timer2 = kENABLE_DELAY * kMilliSecond
        while (I_CS3_Timer2 > 0)
        endwhile

        I_CS3_Timer2 = 100000 * kMilliSecond
        while(I_CS3_Timer2 > 0)
          if(M_Mtr1InPos = kTRUE AND M_Mtr3InPos = kTRUE)
            P_UpperHmStatus = kPOS_JOG_SUCCESS
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr1FFE = kTRUE)
            P_UpperHmStatus = kMTR1_FFE
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr3FFE = kTRUE)
            P_UpperHmStatus = kMTR3_FFE
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr1OpenLoop = kTRUE OR M_Mtr3OpenLoop = kTRUE)
            CMD"#1k #3k"
            P_UpperHmStatus = kPOS_JOG_FAILURE
            I_CS3_Timer2 = -1
          endif
        endwhile

        P_UpperHmStatus = 0  // clear status flag

        // set target to be upper soft limit
        M_Mtr1VarJojPos = (P_MaximumGap/kmm2um)*(kEncCntsPerMm/2)
        M_Mtr3VarJojPos = M_Mtr1VarJojPos

        // move to target
        CMD"#1j=* #3j=*"
        I_CS3_Timer2 = kENABLE_DELAY * kMilliSecond
        while (I_CS3_Timer2 > 0)
        endwhile

        I_CS3_Timer2 = 100000 * kMilliSecond
        while(I_CS3_Timer2 > 0)
          if(M_Mtr1InPos = kTRUE AND M_Mtr3InPos = kTRUE)
            P_UpperHmStatus = kPOS_JOG_SUCCESS
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr1FFE = kTRUE)
            P_UpperHmStatus = kMTR1_FFE
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr3FFE = kTRUE)
            P_UpperHmStatus = kMTR3_FFE
            I_CS3_Timer2 = -1
          endif
          if(M_Mtr1OpenLoop = kTRUE OR M_Mtr3OpenLoop = kTRUE)
            cmd "#1k #3k"
            P_UpperHmStatus = kPOS_JOG_FAILURE
            I_CS3_Timer2 = -1
          endif
        endwhile

        I_CS3_Timer2 = 200 * kMilliSecond
        while(I_CS3_Timer2>0)
        endwhile

        CMD"#1K #3K"
        I_CS3_Timer2 = 100 * kMilliSecond
        while(I_CS3_Timer2>0)
        endwhile

        if(P_UpperHmStatus = kPOS_JOG_SUCCESS)

          // Set home status to homed for mtr 1 & 3
          M_Mtr1HomeComplete = kTRUE
          M_Mtr3HomeComplete = kTRUE

          // home mtrs 5, 6, 7, 8
          Enable PLC kPLC_HomeMtr5
          Enable PLC kPLC_HomeMtr6
          Enable PLC kPLC_HomeMtr7
          Enable PLC kPLC_HomeMtr8

        endif

      endif

      // Reset soft limits
      I113 = P_TmpMtr1HiLim
      I114 = P_TmpMtr1LoLim
      I313 = P_TmpMtr3HiLim
      I314 = P_TmpMtr3LoLim

      // Wait for PLC 24, 25, 26, 27 to finish
      while (P_Mtr5HomeFinish = kFALSE OR P_Mtr6HomeFinish = kFALSE OR P_Mtr7HomeFinish = kFALSE OR P_Mtr8HomeFinish = kFALSE)
      endwhile

      // Turn on PLC for limits
      ENA PLC kPLC_Limits
      I_CS3_Timer2 = kENABLE_DELAY * kMilliSecond
      while (I_CS3_Timer2 > 0)
      endwhile

      CMD"#5K#6K#7K#8K"
      I_CS3_Timer2 = kENABLE_DELAY * kMilliSecond
      while (I_CS3_Timer2 > 0)
      endwhile

      // Reset home indicators
      P_Mtr5HomeFinish = kFALSE
      P_Mtr5HomeFinish = kFALSE
      P_Mtr5HomeFinish = kFALSE
      P_Mtr5HomeFinish = kFALSE

      // Reset jog speeds
      I122 = kGapMtrSpeed
      I322 = kGapMtrSpeed

    endif
  endif
    
  
  // Always clear the P_MotorHomeRequest even if the homing was not allowed.
  // If it is not cleared homing will unexpectedly start if conditions are correct (no movement, and girder mode is correct).
  P_MotorHomeRequest = 0
  P_MotorHomeStatus = 0
Close
